{"version":3,"sources":["api/api.js","components/TodoItem.jsx","components/TodoList.jsx","components/NewTodoForm.jsx","components/TodoApp.jsx","components/TodosFilter.jsx","App.js","index.js"],"names":["BASE_URL","removeTodo","todoId","fetch","method","then","response","json","changeTodo","body","a","JSON","stringify","TodoItem","todo","setTodos","useState","completed","checkedTodo","setCheckedTodo","isEdit","setEdit","title","newTitle","setNewTitle","useEffect","toggleCheck","id","data","list","map","item","funcRemoveTodo","filter","nameInput","useRef","saveTitle","target","value","trim","liClass","classNames","className","type","checked","onChange","onDoubleClick","setTimeout","current","focus","onClick","ref","onBlur","onKeyDown","e","keyCode","TodoList","todos","Fragment","key","NewTodoForm","newTodoTitle","setNewTodoTitle","newTodo","preventDefault","newTodoObj","ok","Date","onSubmit","placeholder","TodoApp","every","allChecked","setAllChecked","toggleAll","Promise","all","htmlFor","path","exact","TodosFilter","updateTodos","itemsLeft","setItemsLeft","reduce","acc","currentValue","clearCompleted","to","activeClassName","App","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.466e21fc.chunk.js","sourcesContent":["const BASE_URL = 'https://mate-api.herokuapp.com';\nconst userId = '1233';\n\nexport const getTodos = () => {\n  return fetch(`${BASE_URL}/todos?userId=${userId}`)\n    .then(response => response.json())\n    .then(response => response.data);\n};\n\nexport const addNewTodo = (todo) => {\n  return fetch(`${BASE_URL}/todos/`, {\n    method: 'POST',\n    body: JSON.stringify(todo),\n  });\n};\n\nexport const removeTodo = (todoId) => {\n  return fetch(`${BASE_URL}/todos/${todoId}`, {\n    method: 'DELETE',\n  })\n    .then(response => response.json());\n};\n\nexport const changeTodo = async(todoId, body) => {\n  return fetch(`${BASE_URL}/todos/${todoId}`, {\n    method: 'PATCH',\n    body: JSON.stringify(body),\n  })\n    .then(response => response.json());\n};\n","import React, { useRef } from 'react';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport classNames from 'classnames';\nimport { removeTodo } from '../api/api';\nimport { changeTodo } from '../api/api';\n\nexport const TodoItem = ({ todo, setTodos }) => {\n  const [checkedTodo, setCheckedTodo] = useState(todo.completed);\n  const [isEdit, setEdit] = useState('');\n  const [newTitle, setNewTitle] = useState(todo.title);\n\n  useEffect(() => {\n    setCheckedTodo(todo.completed);\n  }, [todo]);\n\n  const toggleCheck = async() => {\n    await changeTodo(todo.id, {completed: !todo.completed,})\n      .then((response) => {\n        if (response.data) {\n          setTodos(list => [...list].map((item) => {\n            if (item.id === todo.id) {\n              return {\n                ...item,\n                completed: !todo.completed,\n              };\n            }\n\n            return item;\n          }));\n        }\n      });\n  };\n\n  const funcRemoveTodo = async() => {\n    await removeTodo(todo.id)\n      .then((response) => {\n        if (response.data) {\n          setTodos(list => [...list.filter(item => item.id !== todo.id)]);\n        }\n      });\n  };\n\n  const nameInput = useRef(null);\n\n  const editTodo = () => {\n    setEdit('editing');\n    setTimeout(() => nameInput.current.focus(), 0);\n  };\n\n  const handleChange = ({ target }) => {\n    setNewTitle(target.value);\n  };\n\n  const saveTitle = async({ target }) => {\n    if (!isEdit) {\n      return;\n    }\n\n    if (!target.value.trim()) {\n      await removeTodo(todo.id)\n        .then((response) => {\n          if (response.data) {\n            setTodos(list => list.filter(item => item.id !== todo.id));\n          }\n        });\n\n      return;\n    }\n\n    await changeTodo(todo.id, { title: target.value })\n      .then((response) => {\n        if (response.data) {\n          setTodos(list => list.map((item) => {\n            if (item.id === todo.id) {\n              return {...item, title: target.value,};\n            }\n\n            return item;\n          })\n          )\n        }\n      });\n    setEdit('');\n  };\n\n  const checkKey = (e) => {\n    const [enterKey, escKey] = [13, 27];\n\n    if (e.keyCode === enterKey) {\n      saveTitle(e);\n    } else if (e.keyCode === escKey) {\n      setEdit('');\n    }\n  };\n\n  const liClass = classNames({\n    completed: checkedTodo,\n    [isEdit]: isEdit,\n  });\n\n  return (\n    <li\n      className={liClass}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={checkedTodo}\n          onChange={toggleCheck}\n        />\n        <label onDoubleClick={editTodo}>{todo.title}</label>\n        <button\n          type=\"button\"\n          className=\"destroy-btn\"\n          onClick={funcRemoveTodo}\n        />\n      </div>\n      <input\n        type=\"text\"\n        className=\"edit\"\n        ref={nameInput}\n        onChange={handleChange}\n        value={newTitle}\n        onBlur={saveTitle}\n        onKeyDown={checkKey}\n      />\n    </li>\n  );\n};\n","import React from 'react';\nimport { TodoItem } from './TodoItem';\n\nexport const TodoList = ({ todos, setTodos }) => {\n  return (\n    <ul className=\"todo-list\">\n      {todos.map(todo => (\n        <React.Fragment key={todo.id}>\n          <TodoItem todo={todo} setTodos={setTodos} />\n        </React.Fragment>\n      ))}\n    </ul>\n  );\n};\n","import React, { useState } from 'react';\nimport { addNewTodo } from '../api/api';\n\nexport const NewTodoForm = ({ setTodos }) => {\n  const [newTodoTitle, setNewTodoTitle] = useState('');\n\n  const handleChange = ({ target }) => {\n    setNewTodoTitle(target.value);\n  };\n\n  const newTodo = async(e) => {\n    e.preventDefault();\n\n    if (!newTodoTitle.trim()) {\n      return;\n    }\n\n    const newTodoObj = {\n      \"userId\": 1233,\n      \"completed\": false,\n      \"title\": newTodoTitle,\n    };\n\n    setNewTodoTitle('');\n    await addNewTodo(newTodoObj)\n      .then((response) => {\n        if (response.ok) {\n          setTodos(list => [...list, {\n            ...newTodoObj,\n            id: new Date(),\n          }]);\n        }\n      });\n  };\n\n  return (\n    <form onSubmit={newTodo}>\n      <input\n        type=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        value={newTodoTitle}\n        onChange={handleChange}\n      />\n    </form>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport {\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport { TodoList } from './TodoList';\nimport { changeTodo } from '../api/api';\nimport { NewTodoForm } from './NewTodoForm';\n\nexport const TodoApp = ({ todos, setTodos }) => {\n  const [allChecked, setAllChecked] = useState(todos && todos.every(\n    todo => !!todo.completed\n  ));\n\n  useEffect(() => {\n    setAllChecked(todos && todos.every(todo => !!todo.completed));\n  }, [todos]);\n\n  const toggleAll = async() => {\n    await Promise.all(todos.map((todo) => {\n      return changeTodo(todo.id, { completed: !allChecked });\n    }));\n\n    setTodos(list => list.map(todo => ({\n      ...todo,\n      completed: !allChecked,\n    })));\n  };\n\n  return (\n    <>\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <NewTodoForm setTodos={setTodos} />\n      </header>\n\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          onChange={toggleAll}\n          checked={allChecked}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n        {todos && (\n        <Switch>\n          <Route path=\"/\" exact>\n            <TodoList todos={todos} setTodos={setTodos} />\n          </Route>\n          <Route path=\"/active\" exact>\n            <TodoList\n              todos={todos.filter(todo => !todo.completed)}\n              setTodos={setTodos}\n            />\n          </Route>\n          <Route path=\"/completed\" exact>\n            <TodoList\n              todos={todos.filter(todo => !!todo.completed)}\n              setTodos={setTodos}\n            />\n          </Route>\n        </Switch>\n        )}\n      </section>\n    </>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { removeTodo } from '../api/api';\n\nexport const TodosFilter = ({ todos, updateTodos }) => {\n  const [itemsLeft, setItemsLeft] = useState('');\n\n  useEffect(() => {\n    if (todos) {\n      setItemsLeft(todos.reduce((acc, currentValue) => {\n        if (!currentValue.completed) {\n          return acc + 1;\n        }\n\n        return acc;\n      }, 0));\n    }\n  }, [todos]);\n\n  const clearCompleted = async() => {\n    await Promise.all(todos.map((todo) => {\n      if (todo.completed) {\n        return removeTodo(todo.id);\n      }\n\n      return todo;\n    }));\n\n    updateTodos();\n  };\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        {`${itemsLeft}  `}\n        items left\n      </span>\n\n      <ul className=\"filters\">\n        <li>\n          <NavLink\n            to=\"/\"\n            exact\n            activeClassName=\"selected\"\n          >\n            All\n          </NavLink>\n        </li>\n\n        <li>\n          <NavLink to=\"/active\" activeClassName=\"selected\">\n            Active\n          </NavLink>\n        </li>\n\n        <li>\n          <NavLink to=\"/completed\" activeClassName=\"selected\">\n            Completed\n          </NavLink>\n        </li>\n      </ul>\n\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={clearCompleted}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { TodoApp } from './components/TodoApp';\nimport { TodosFilter } from './components/TodosFilter';\nimport { getTodos } from './api/api';\n\nfunction App() {\n  const [todos, setTodos] = useState('');\n\n  useEffect(() => {\n    updateTodos();\n  }, []);\n\n  const updateTodos = () => {\n    getTodos()\n      .then(response => setTodos(response));\n  };\n\n  return (\n    <>\n      <section className=\"todoapp\">\n        <TodoApp todos={todos} setTodos={setTodos} />\n        {!!todos.length\n        && <TodosFilter todos={todos} updateTodos={updateTodos} />}\n      </section>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}