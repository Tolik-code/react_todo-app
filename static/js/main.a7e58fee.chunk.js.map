{"version":3,"sources":["api/api.js","components/TodoItem.jsx","components/TodoList.jsx","components/TodoApp.jsx","components/TodosFilter.jsx","App.js","index.js"],"names":["BASE_URL","removeTodo","todoId","fetch","method","then","response","json","changeTodo","body","a","JSON","stringify","TodoItem","todo","updateTodos","useState","completed","checkedTodo","setCheckedTodo","isEdit","setEdit","title","newTitle","setNewTitle","useEffect","toggleCheck","id","funcRemoveTodo","nameInput","useRef","saveTitle","target","value","trim","className","type","checked","onChange","onDoubleClick","setTimeout","current","focus","onClick","ref","onBlur","onKeyDown","e","keyCode","TodoList","todos","map","Fragment","key","TodoApp","newTodoTitle","setNewTodoTitle","error","setError","every","allChecked","setAllChecked","newTodo","preventDefault","newTodoObj","toggleAll","Promise","all","onSubmit","placeholder","htmlFor","path","exact","filter","TodosFilter","itemsLeft","setItemsLeft","reduce","acc","currentValue","clearCompleted","to","activeClassName","App","setTodos","data","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a7e58fee.chunk.js","sourcesContent":["const BASE_URL = 'https://mate-api.herokuapp.com';\nconst userId = '1233';\n\nexport const getTodos = () => {\n  return fetch(`${BASE_URL}/todos?userId=${userId}`)\n    .then(response => response.json())\n    .then(response => response.data);\n};\n\nexport const addNewTodo = (todo) => {\n  return fetch(`${BASE_URL}/todos/`, {\n    method: 'POST',\n    body: JSON.stringify(todo),\n  });\n};\n\nexport const removeTodo = (todoId) => {\n  return fetch(`${BASE_URL}/todos/${todoId}`, {\n    method: 'DELETE',\n  })\n    .then(response => response.json());\n};\n\nexport const changeTodo = async(todoId, body) => {\n  return fetch(`${BASE_URL}/todos/${todoId}`, {\n    method: 'PATCH',\n    body: JSON.stringify(body),\n  })\n    .then(response => response.json());\n};\n","import React, { useRef } from 'react';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { removeTodo } from '../api/api';\nimport { changeTodo } from '../api/api';\n\nexport const TodoItem = ({ todo, updateTodos }) => {\n  const [checkedTodo, setCheckedTodo] = useState(todo.completed);\n  const [isEdit, setEdit] = useState('');\n  const [newTitle, setNewTitle] = useState(todo.title);\n\n  useEffect(() => {\n    setCheckedTodo(todo.completed);\n  }, [todo]);\n\n  const toggleCheck = async() => {\n    await changeTodo(todo.id, {completed: !todo.completed,});\n    updateTodos();\n  };\n\n  const funcRemoveTodo = async() => {\n    await removeTodo(todo.id);\n    updateTodos();\n  };\n\n  let nameInput = useRef(null);\n\n  const editTodo = () => {\n    setEdit('editing');\n    setTimeout(() => nameInput.current.focus(), 0);\n  };\n\n  const handleChange = ({ target }) => {\n    setNewTitle(target.value);\n  };\n\n  const saveTitle = async({ target }) => {\n    if (!isEdit) {\n      return;\n    }\n\n    if (!target.value.trim()) {\n      await removeTodo(todo.id);\n      updateTodos();\n\n      return;\n    }\n\n    await changeTodo(todo.id, { title: target.value });\n    setEdit('');\n    updateTodos();\n  };\n\n  const checkKey = (e) => {\n    if (e.keyCode === 13) {\n      saveTitle(e);\n    } else if (e.keyCode === 27) {\n      setEdit('');\n    }\n  };\n\n  return (\n    <li\n      className={`${checkedTodo ? 'completed' : ''} ${isEdit}`}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={checkedTodo}\n          onChange={toggleCheck}\n        />\n        <label onDoubleClick={editTodo}>{todo.title}</label>\n        <button type=\"button\" className=\"destroy\" onClick={funcRemoveTodo} />\n      </div>\n      <input\n        type=\"text\"\n        className=\"edit\"\n        ref={nameInput}\n        onChange={handleChange}\n        value={newTitle}\n        onBlur={saveTitle}\n        onKeyDown={checkKey}\n      />\n    </li>\n  );\n};","import React from 'react';\nimport { TodoItem } from './TodoItem';\n\nexport const TodoList = ({ todos, updateTodos }) => {\n  return (\n    <ul className=\"todo-list\">\n      {todos.map(todo => (\n        <React.Fragment key={todo.id}>\n          <TodoItem todo={todo} updateTodos={updateTodos} />\n        </React.Fragment>\n      ))}\n\n      {/* <li className=\"completed\">\n        <div className=\"view\">\n          <input type=\"checkbox\" className=\"toggle\" />\n          <label>qwertyuio</label>\n          <button type=\"button\" className=\"destroy\" />\n        </div>\n        <input type=\"text\" className=\"edit\" />\n      </li> */}\n      {/* <li className=\"editing\">\n        <div className=\"view\">\n          <input type=\"checkbox\" className=\"toggle\" />\n          <label>zxcvbnm</label>\n          <button type=\"button\" className=\"destroy\" />\n        </div>\n        <input type=\"text\" className=\"edit\" />\n      </li> */}\n    </ul>\n  )\n}\n","import React, { useState, useEffect } from 'react';\nimport {\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport { TodoList } from './TodoList';\nimport { addNewTodo } from '../api/api';\nimport { changeTodo } from '../api/api';\n\nexport const TodoApp = ({ todos, updateTodos }) => {\n  const [newTodoTitle, setNewTodoTitle] = useState('');\n  const [error, setError] = useState(false);\n  const [allChecked, setAllChecked] = useState(todos && todos.every(\n    todo => todo.completed === true\n  ));\n\n  useEffect(() => {\n    setAllChecked(todos && todos.every(todo => todo.completed === true));\n  }, [todos]);\n\n  const handleChange = ({ target }) => {\n    setNewTodoTitle(target.value);\n    setError(false);\n  };\n\n  const newTodo = async(e) => {\n    e.preventDefault();\n\n    if (!newTodoTitle.trim()) {\n      return setError(true);\n    }\n\n    const newTodoObj = {\n      \"userId\": 1233,\n      \"completed\": false,\n      \"title\": newTodoTitle,\n    };\n\n    setNewTodoTitle('');\n    await addNewTodo(newTodoObj);\n    updateTodos();\n  };\n\n  const toggleAll = async() => {\n    await Promise.all(todos.map((todo) => {\n      return changeTodo(todo.id, { completed: !allChecked });\n    }));\n    updateTodos();\n  };\n\n  return (\n    <>\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <form onSubmit={newTodo}>\n          <input\n            type=\"text\"\n            className={`new-todo ${error && 'error'}`}\n            placeholder=\"What needs to be done?\"\n            value={newTodoTitle}\n            onChange={handleChange}\n          />\n        </form>\n      </header>\n\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          onChange={toggleAll}\n          checked={allChecked}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n        {todos && (\n        <Switch>\n          <Route path=\"/\" exact>\n            <TodoList todos={todos} updateTodos={updateTodos} />\n          </Route>\n          <Route path=\"/active\" exact>\n            <TodoList\n              todos={todos.filter(todo => todo.completed === false)}\n              updateTodos={updateTodos}\n            />\n          </Route>\n          <Route path=\"/completed\" exact>\n            <TodoList\n              todos={todos.filter(todo => todo.completed === true)}\n              updateTodos={updateTodos}\n            />\n          </Route>\n        </Switch>\n        )}\n      </section>\n    </>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { removeTodo } from '../api/api';\n\nexport const TodosFilter = ({ todos, updateTodos }) => {\n  const [itemsLeft, setItemsLeft] = useState('');\n\n  useEffect(() => {\n    if (todos) {\n      setItemsLeft(todos.reduce((acc, currentValue) => {\n        if (!currentValue.completed) {\n          return acc + 1;\n        }\n\n        return acc;\n      }, 0));\n    }\n  }, [todos]);\n\n  const clearCompleted = async() => {\n    await Promise.all(todos.map((todo) => {\n      if (todo.completed) {\n        return removeTodo(todo.id);\n      }\n\n      return todo;\n    }));\n\n    updateTodos();\n  };\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        {`${itemsLeft}  `}\n        items left\n      </span>\n\n      <ul className=\"filters\">\n        <li>\n          <NavLink\n            to=\"/\"\n            exact\n            activeClassName=\"selected\"\n          >\n            All\n          </NavLink>\n        </li>\n\n        <li>\n          <NavLink to=\"/active\" activeClassName=\"selected\">\n            Active\n          </NavLink>\n        </li>\n\n        <li>\n          <NavLink to=\"/completed\" activeClassName=\"selected\">\n            Completed\n          </NavLink>\n        </li>\n      </ul>\n\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={clearCompleted}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { TodoApp } from './components/TodoApp';\nimport { TodosFilter } from './components/TodosFilter';\nimport { getTodos } from './api/api';\n\nfunction App() {\n  const [todos, setTodos] = useState('');\n\n  useEffect(() => {\n    updateTodos();\n  }, []);\n\n  const updateTodos = () => {\n    getTodos()\n      .then(response => setTodos(response));\n  };\n\n  return (\n    <>\n      <section className=\"todoapp\">\n        <TodoApp todos={todos} updateTodos={updateTodos} />\n        {!!todos.length\n        && <TodosFilter todos={todos} updateTodos={updateTodos} />}\n      </section>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}